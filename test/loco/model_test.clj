(ns loco.model-test
  (:require [loco.model :as model])
  (:use clojure.test
        loco.core
        loco.constraints))

;; problem generated by magic series test (ms-model l)
(def magic-series-6-problem
  '({:type :cardinality,
     :variables ([:s 0] [:s 1] [:s 2] [:s 3] [:s 4] [:s 5]),
     :values (0 1 2 3 4 5),
     :occurrences ([:s 0] [:s 1] [:s 2] [:s 3] [:s 4] [:s 5]),
     :closed nil}
    {:type :int-domain,
     :can-init-var true,
     :name [:s 0],
     :domain {:min 0, :max 5}}
    {:type :int-domain,
     :can-init-var true,
     :name [:s 1],
     :domain {:min 0, :max 5}}
    {:type :int-domain,
     :can-init-var true,
     :name [:s 2],
     :domain {:min 0, :max 5}}
    {:type :int-domain,
     :can-init-var true,
     :name [:s 3],
     :domain {:min 0, :max 5}}
    {:type :int-domain,
     :can-init-var true,
     :name [:s 4],
     :domain {:min 0, :max 5}}
    {:type :int-domain,
     :can-init-var true,
     :name [:s 5],
     :domain {:min 0, :max 5}}))

(def expected-magic-series-6-problem-translation
  '(
    {:type :int-var,
     :name [:s 0],
     :real-name "int-var7338",
     :domain {:min 0, :max 5}}
    {:type :int-var,
     :name [:s 1],
     :real-name "int-var7339",
     :domain {:min 0, :max 5}}
    {:type :int-var,
     :name [:s 2],
     :real-name "int-var7340",
     :domain {:min 0, :max 5}}
    {:type :int-var,
     :name [:s 3],
     :real-name "int-var7341",
     :domain {:min 0, :max 5}}
    {:type :int-var,
     :name [:s 4],
     :real-name "int-var7342",
     :domain {:min 0, :max 5}}
    {:type :int-var,
     :name [:s 5],
     :real-name "int-var7343",
     :domain {:min 0, :max 5}}
    {:type :cardinality,
     :variables ([:s 0] [:s 1] [:s 2] [:s 3] [:s 4] [:s 5]),
     :values (0 1 2 3 4 5),
     :occurrences ([:s 0] [:s 1] [:s 2] [:s 3] [:s 4] [:s 5]),
     :closed nil}))

(def magic-series-6-reify-problem
  '({:type :int-domain,
     :can-init-var true,
     :name [:s 0],
     :domain {:min 0, :max 1}}
    {:type :int-domain,
     :can-init-var true,
     :name [:s 1],
     :domain {:min 0, :max 1}}
    {:type [:+ :=],
     :args
     ({:type :reify,
       :arg {:arg2 [:s 0], :eq "=", :type :arithm-eq, :arg1 0},
       :id id7992}
      {:type :reify,
       :arg {:arg2 [:s 1], :eq "=", :type :arithm-eq, :arg1 0},
       :id id7993}),
     :id id7995,
     :eq-shortcut true,
     :eq-arg [:s 0]}
    {:type [:+ :=],
     :args
     ({:type :reify,
       :arg {:arg2 [:s 0], :eq "=", :type :arithm-eq, :arg1 1},
       :id id7996}
      {:type :reify,
       :arg {:arg2 [:s 1], :eq "=", :type :arithm-eq, :arg1 1},
       :id id7997}),
     :id id7999,
     :eq-shortcut true,
     :eq-arg [:s 1]}))

(def expected-magic-series-6-reify-problem-translation
  '({:type :bool-var, :name [:s 0], :real-name "bool-var8002"}
    {:type :bool-var, :name [:s 1], :real-name "bool-var8003"}
    {:type [:+ :=],
     :args
     ({:type :reify,
       :arg {:arg2 [:s 0], :eq "=", :type :arithm-eq, :arg1 0},
       :id id7992}
      {:type :reify,
       :arg {:arg2 [:s 1], :eq "=", :type :arithm-eq, :arg1 0},
       :id id7993}),
     :id id7995,
     :eq-shortcut true,
     :eq-arg [:s 0]}
    {:type [:+ :=],
     :args
     ({:type :reify,
       :arg {:arg2 [:s 0], :eq "=", :type :arithm-eq, :arg1 1},
       :id id7996}
      {:type :reify,
       :arg {:arg2 [:s 1], :eq "=", :type :arithm-eq, :arg1 1},
       :id id7997}),
     :id id7999,
     :eq-shortcut true,
     :eq-arg [:s 1]}))

(deftest translate-test
  (testing "model/translate refactor produces same declarative mappings"
    (is (=
         (model/translate
          (->> (range 7338 7344) (map (partial str "var")))
          magic-series-6-problem)
         expected-magic-series-6-problem-translation))
    (is (=
         (model/translate
          (->> (range 8002 8004) (map (partial str "var")))
          magic-series-6-reify-problem)
         expected-magic-series-6-reify-problem-translation))))
