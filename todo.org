* constraints
** hard
*** MDD
I've so far only seen PHD papers on this subject

mddc(IntVar[] vars, MultivaluedDecisionDiagram MDD)
 requires building a complex object of ints and tuples
http://www.choco-solver.org/apidocs/org/chocosolver/util/objects/graphs/MultivaluedDecisionDiagram.html

*** key-sort

implementation requires int-var[][]

#+BEGIN_SRC clojure
(defloco $key-sort
    "Creates a keySort constraint which ensures that the variables of
  SORTEDvars correspond to the variables of vars according to a
  permutation stored in PERMvars (optional, can be null). The variables
  of SORTEDvars are also sorted in increasing order wrt to K-size
  tuples. The sort is stable, that is, ties are broken using the
  position of the tuple in vars.


For example:
- vars= (<4,2,2>,<2,3,1>,<4,2,1><1,3,0>)
- SORTEDvars= (<1,3,0>,<2,3,1>,<4,2,2>,<4,2,1>)
- PERMvars= (2,1,3,0)
- K = 2"
    {:choco "keySort(IntVar[][] vars, IntVar[] PERMvars, IntVar[][] SORTEDvars, int K)"}
    [])
#+END_SRC

*** distinct-under-condition

implement allDifferentUnderCondition(IntVar[] vars, Condition condition, boolean singleCondition)
figure out how to convert a function into a Condition object
http://www.choco-solver.org/apidocs/org/chocosolver/solver/constraints/nary/alldifferent/conditions/Condition.html
possibly need to use reify

#+BEGIN_SRC clojure
(defloco $distinct-under-condition
    "Creates an allDifferent constraint subject to the given
  condition. More precisely: IF singleCondition for all X,Y in vars,
  condition(X) => X != Y ELSE for all X,Y in vars, condition(X) AND
  condition(Y) => X != Y"
    {:choco "allDifferentUnderCondition(IntVar[] vars, Condition condition, boolean singleCondition)"}
    [int-vars condition single-condition?]
    {:pre [(sequential? int-vars)
           (boolean? single-condition?)
           (fn? condition)]}
    )
#+END_SRC
